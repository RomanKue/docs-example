/* tslint:disable */

/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Branch protections protect branches
 */
export interface ProtectedBranch {
  url: string;
  required_status_checks?: StatusCheckPolicy;
  required_pull_request_reviews?: {
    url: string;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it.
     */
    require_last_push_approval?: boolean;
    dismissal_restrictions?: {
      url: string;
      users_url: string;
      teams_url: string;
      users: SimpleUser[];
      teams: Team[];
      apps?: GitHubApp[];
      [k: string]: unknown;
    };
    bypass_pull_request_allowances?: {
      users: SimpleUser2[];
      teams: Team1[];
      apps?: GitHubApp1[];
      [k: string]: unknown;
    };
    [k: string]: unknown;
  };
  required_signatures?: {
    url: string;
    enabled: boolean;
    [k: string]: unknown;
  };
  enforce_admins?: {
    url: string;
    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  restrictions?: BranchRestrictionPolicy;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    enabled?: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    enabled?: boolean;
  };

  [k: string]: unknown;
}

/**
 * Status Check Policy
 */
export interface StatusCheckPolicy {
  url: string;
  strict: boolean;
  contexts: string[];
  checks: {
    context: string;
    app_id: number | null;
    [k: string]: unknown;
  }[];
  contexts_url: string;

  [k: string]: unknown;
}

/**
 * A GitHub user.
 */
export interface SimpleUser {
  name?: string | null;
  email?: string | null;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;

  [k: string]: unknown;
}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
    [k: string]: unknown;
  };
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: null | TeamSimple;

  [k: string]: unknown;
}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;

  [k: string]: unknown;
}

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: null | SimpleUser1;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string | null;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string | null;
  pem?: string;

  [k: string]: unknown;
}

/**
 * A GitHub user.
 */
export interface SimpleUser1 {
  name?: string | null;
  email?: string | null;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;

  [k: string]: unknown;
}

/**
 * A GitHub user.
 */
export interface SimpleUser2 {
  name?: string | null;
  email?: string | null;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;

  [k: string]: unknown;
}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team1 {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
    [k: string]: unknown;
  };
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: null | TeamSimple1;

  [k: string]: unknown;
}

/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple1 {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;

  [k: string]: unknown;
}

/**
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export interface GitHubApp1 {
  /**
   * Unique identifier of the GitHub app
   */
  id: number;
  /**
   * The slug name of the GitHub app
   */
  slug?: string;
  node_id: string;
  owner: null | SimpleUser3;
  /**
   * The name of the GitHub app
   */
  name: string;
  description: string | null;
  external_url: string;
  html_url: string;
  created_at: string;
  updated_at: string;
  /**
   * The set of permissions for the GitHub app
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
  };
  /**
   * The list of events for the GitHub app
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   */
  installations_count?: number;
  client_id?: string;
  client_secret?: string;
  webhook_secret?: string | null;
  pem?: string;

  [k: string]: unknown;
}

/**
 * A GitHub user.
 */
export interface SimpleUser3 {
  name?: string | null;
  email?: string | null;
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  starred_at?: string;

  [k: string]: unknown;
}

/**
 * Branch Restriction Policy
 */
export interface BranchRestrictionPolicy {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
    [k: string]: unknown;
  }[];
  teams: {
    id?: number;
    node_id?: string;
    url?: string;
    html_url?: string;
    name?: string;
    slug?: string;
    description?: string | null;
    privacy?: string;
    permission?: string;
    members_url?: string;
    repositories_url?: string;
    parent?: string | null;
    [k: string]: unknown;
  }[];
  apps: {
    id?: number;
    slug?: string;
    node_id?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      url?: string;
      repos_url?: string;
      events_url?: string;
      hooks_url?: string;
      issues_url?: string;
      members_url?: string;
      public_members_url?: string;
      avatar_url?: string;
      description?: string;
      gravatar_id?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
      [k: string]: unknown;
    };
    name?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      metadata?: string;
      contents?: string;
      issues?: string;
      single_file?: string;
      [k: string]: unknown;
    };
    events?: string[];
    [k: string]: unknown;
  }[];

  [k: string]: unknown;
}
