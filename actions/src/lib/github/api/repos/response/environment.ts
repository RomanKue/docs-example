/* tslint:disable */
/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

import {SimpleUser} from '../../teams/response/simple-user.js';

/**
 * Details of a deployment environment
 */
export interface Environment {
  /**
   * The id of the environment.
   */
  id: number;
  node_id: string;
  /**
   * The name of the environment.
   */
  name: string;
  url: string;
  html_url: string;
  /**
   * The time that the environment was created, in ISO 8601 format.
   */
  created_at: string;
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   */
  updated_at: string;
  protection_rules?: (
    | {
        id: number;
        node_id: string;
        type: string;
        /**
         * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
         */
        wait_timer?: number;
        [k: string]: unknown;
      }
    | {
        id: number;
        node_id: string;
        type: string;
        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: {
          /**
           * The type of reviewer.
           */
          type?: 'User' | 'Team';
          reviewer?: SimpleUser | Team;
          [k: string]: unknown;
        }[];
        [k: string]: unknown;
      }
    | {
        id: number;
        node_id: string;
        type: string;
        [k: string]: unknown;
      }
  )[];
  /**
   * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
   */
  deployment_branch_policy?: {
    /**
     * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
     */
    protected_branches: boolean;
    /**
     * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
     */
    custom_branch_policies: boolean;
    [k: string]: unknown;
  } | null;
  [k: string]: unknown;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface Team {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
    [k: string]: unknown;
  };
  url: string;
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: null | TeamSimple;
  [k: string]: unknown;
}
/**
 * Groups of organization members that gives permissions on specified repositories.
 */
export interface TeamSimple {
  /**
   * Unique identifier of the team
   */
  id: number;
  node_id: string;
  /**
   * URL for the team
   */
  url: string;
  members_url: string;
  /**
   * Name of the team
   */
  name: string;
  /**
   * Description of the team
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   */
  permission: string;
  /**
   * The level of privacy this team should have
   */
  privacy?: string;
  html_url: string;
  repositories_url: string;
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   */
  ldap_dn?: string;
  [k: string]: unknown;
}
